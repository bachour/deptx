from django.db import models

from deptx.helpers import generateUUID
from persistence.models import PDBundle

GRAPH_FOLDER = "graphs/"

class Unit(models.Model):
    name = models.CharField(max_length=256)
    serial = models.CharField(max_length=36, default=generateUUID)
    description = models.TextField()
    isAdministrative = models.BooleanField()
    
    def __unicode__(self):
        return self.name
    
class Requisition(models.Model):
    CATEGORY_FORM = 0
    CATEGORY_TASK = 1
    CATEGORY_DOCUMENT = 2
    
    CATEGORY_CHOICES = (
        (CATEGORY_FORM, "form for form"),
        (CATEGORY_TASK, "form for task"),
        (CATEGORY_DOCUMENT, "form for document"),
    )
    
    
    name = models.CharField(max_length=256)
    serial = models.CharField(max_length=36, default=generateUUID)
    description = models.TextField()
    unit = models.ForeignKey(Unit)
    category = models.IntegerField(choices=CATEGORY_CHOICES)
    trust = models.IntegerField(default=25)
    isInitial = models.BooleanField()
    
    def __unicode__(self):
        return self.name

class Task(models.Model):
    name = models.CharField(max_length=256)
    description = models.TextField()
    unit = models.ForeignKey(Unit)
    serial = models.CharField(max_length=36, default=generateUUID)
    trust = models.IntegerField(default=25)

    def __unicode__(self):
        return self.name

class Mission(models.Model):
    name = models.CharField(max_length=50)
    rank = models.IntegerField()
    
    def __unicode__(self):
        return self.name + " (" + str(self.rank) + ")"

  
class Case(models.Model):
    name = models.CharField(max_length=50)
    mission = models.ForeignKey(Mission)
    rank = models.IntegerField()
    serial = models.SlugField(max_length=36, default=generateUUID)
    
    def __unicode__(self):
        return self.mission.name + " - Case " + str(self.rank) + ": " + self.name

class Document(models.Model):
    name = models.CharField(max_length=256)
    serial = models.CharField(max_length=36, default=generateUUID)
    content = models.TextField()
    unit = models.ForeignKey(Unit)
    #TODO set right values for blank and true (or inherit from abstract model?)
    #A separation between auto-generated and non-autogenerated models would make sense perhaps
    task = models.ForeignKey(Task)
    #TODO set right values for blank and true (or inherit from abstract model?)
    case = models.ForeignKey(Case)
    
    def __unicode__(self):
        return self.name

class Provenance(models.Model):
    document = models.OneToOneField(Document)
    pdBundle = models.OneToOneField(PDBundle)
    imagefile = models.ImageField(upload_to="graphs/", blank=True, null=True)
    
    def __unicode__(self):
        return "Provenance of " + self.document.name
        

