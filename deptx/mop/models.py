from django.db import models

from players.models import Mop
from assets.models import Unit, Requisition, CronDocument, MopDocument
from django_extensions.db.fields import CreationDateTimeField, ModificationDateTimeField
from provmanager.models import Provenance
from mop.clearance import Clearance, convertTrustIntoClearance
import deptx.friendly_id as friendly_id
import re
from django.template import Context, loader, Template

class TrustTracker(models.Model):
    createdAt = CreationDateTimeField()
    modifiedAt = ModificationDateTimeField()
    
    mop = models.OneToOneField(Mop, related_name="trustTracker")
    trust = models.IntegerField(default=0)
    totalTrust = models.IntegerField(default=0)
    allowance = models.IntegerField(default=0)
    clearance = models.IntegerField(choices=Clearance.CHOICES_CLEARANCE_ALL, default=Clearance.CLEARANCE_LOW)
    
    def getCssUrl(self):
        return Clearance(self.clearance).getCssUrl()
    
    def getMailUrl(self):
        return Clearance(self.clearance).getMailUrl()
    
    def getBadgeUrl(self):
        return Clearance(self.clearance).getBadgeUrl()
    
    def addTrust(self, trust):
        self.totalTrust += trust
        self.trust += trust
        self.save()
    
    def __unicode__(self):
        return "%s %s %s" % (self.mop.user.username, self.trust, self.get_clearance_display())

class TrustInstance(models.Model):
    createdAt = CreationDateTimeField()
    modifiedAt = ModificationDateTimeField()

    mop = models.ForeignKey(Mop)
    trust = models.IntegerField(default=0)
    clearance = models.IntegerField(choices=Clearance.CHOICES_CLEARANCE_ALL, default=Clearance.CLEARANCE_LOW, help_text="will be overridden when saved")
    
    def allowance(self):
        allowance = int(self.trust * 0.1)
        if allowance <0:
            allowance = 0
        return allowance
    
    def convertTrustIntoClearance(self):
        return convertTrustIntoClearance(self.trust)
    
    def getBadgeUrl(self):
        return Clearance(self.clearance).getBadgeUrl()
    
    def save(self, *args, **kwargs):
        self.clearance = self.convertTrustIntoClearance()
        super(TrustInstance, self).save(*args, **kwargs)    
    
    def __unicode__(self):
        return "%s - %s - %s" % (self.createdAt, self.mop.user.username, self.trust)
    



class RandomizedDocument(models.Model):
    mopDocument = models.ForeignKey(MopDocument)
    provenance = models.OneToOneField(Provenance, related_name="randomizedDocument")
    serial = models.CharField(max_length=36, blank=True, null=True, unique=True, help_text="leave blank, will be generated by system")
    #TODO/PERHAPS replace with Due-date
    active = models.BooleanField(default=True)
    createdAt = CreationDateTimeField()
    modifiedAt = ModificationDateTimeField()
    
    def __unicode__(self):
        if self.active == True:
            active = "ACTIVE"
        else:
            active = "INACTIVE"
        return "%s: %s (%s)" % (active, self.serial, self.mopDocument.provenance.name)
    
    def getBadgeUrl(self):
        return Clearance(self.mopDocument.clearance).getBadgeUrl()
    
    def save(self, *args, **kwargs):
        super(RandomizedDocument, self).save(*args, **kwargs)
        if self.id and not self.serial:
            self.serial = Clearance(self.mopDocument.clearance).generateSerial(self.mopDocument)
            super(RandomizedDocument, self).save()

class MopDocumentInstance(models.Model):
    STATUS_ACTIVE = 0
    STATUS_REPORTED = 1
    STATUS_REVOKED = 3
    STATUS_HACKED = 4
     
    CHOICES_STATUS = (
        (STATUS_ACTIVE, "active"),
        (STATUS_REPORTED, "reported"),
        (STATUS_REVOKED, "revoked"),
        (STATUS_HACKED, "hacked"),
    )
    
    TYPE_MOP = 0
    TYPE_CRON = 1
    
    CHOICES_TYPE = (
        (TYPE_MOP, "MOP"),
        (TYPE_CRON, "CRON"),
    )

    createdAt = CreationDateTimeField()
    modifiedAt = ModificationDateTimeField()
    
    mop = models.ForeignKey(Mop)
    status = models.IntegerField(choices=CHOICES_STATUS, default=STATUS_ACTIVE)
    modified = models.BooleanField(default=False)
    used = models.BooleanField(default=False)
    correct = models.BooleanField(default=False)
    provenanceState = models.TextField(blank=True, null=True)

    #stuff needed if it is a mop-document or cron-document
    type = models.IntegerField(choices=CHOICES_TYPE, default=TYPE_MOP)
    randomizedDocument = models.ForeignKey(RandomizedDocument, blank=True, null=True)
    cronDocument = models.ForeignKey(CronDocument, blank=True, null=True)
    
    def getClearance(self):
        if self.type == self.TYPE_CRON:
            return self.cronDocument.clearance
        else:
            return self.randomizedDocument.mopDocument.clearance
    
    def getTrustFinal(self):
        clearance = Clearance(self.getClearance())
        if self.status == self.STATUS_REPORTED:
            if self.correct:
                return clearance.getTrustReportedCorrect()
            else:
                return clearance.getTrustReportedIncorrect()
        elif self.status == self.STATUS_REVOKED:
            return clearance.getTrustRevoked()
        else:
            return 0
    
    def getTrustRequested(self):
        clearance = Clearance(self.getClearance())
        return clearance.getTrustRequested()

    def getDocumentSerial(self):
        if self.type == self.TYPE_MOP:
            return self.randomizedDocument.serial
        else:
            return self.cronDocument.serial

    def __unicode__(self):
        return "%s" % (self.getDocumentSerial())
        
class RequisitionBlank(models.Model):
    mop = models.ForeignKey(Mop)
    requisition = models.ForeignKey(Requisition)
    createdAt = CreationDateTimeField()
    modifiedAt = ModificationDateTimeField()
    
    def __unicode__(self):
        return self.requisition.name + " - " + self.mop.user.username 

class RequisitionInstance(models.Model):
    blank = models.ForeignKey(RequisitionBlank)
    data = models.CharField(max_length=256, blank=True, null=True)
    used = models.BooleanField(default=False)
    createdAt = CreationDateTimeField()
    modifiedAt = ModificationDateTimeField()
    serial = models.CharField(max_length=36, blank=True, null=True, unique=True, help_text="leave blank, will be generated by system")
    
    def __unicode__(self):
        return "%s-%s" % (self.blank.requisition.serial, self.serial)
    
    def save(self, *args, **kwargs):
        self.data = re.sub("[^0-9A-Za-z-]", "", self.data)
        super(RequisitionInstance, self).save(*args, **kwargs)
        if self.id and not self.serial:
            self.serial = "%s" % (friendly_id.encode(self.id))
            super(RequisitionInstance, self).save(*args, **kwargs)

class Mail(models.Model):
    TYPE_RECEIVED = 0
    TYPE_SENT = 1
    TYPE_DRAFT = 2
    
    CHOICES_TYPE = (
        (TYPE_RECEIVED, "received"),
        (TYPE_SENT, "sent"),
        (TYPE_DRAFT, "draft")
    )
    
    STATE_NORMAL = 0
    STATE_TRASHED = 1
    STATE_DELETED = 2
    
    CHOICES_STATE = (
        (STATE_NORMAL, "normal"),
        (STATE_TRASHED, "trashed"),
        (STATE_DELETED, "deleted")
    )
  
    SUBJECT_EMPTY = 1
    
    SUBJECT_REQUEST_FORM = 101
    SUBJECT_REQUEST_DOCUMENT = 103
    SUBJECT_SUBMIT_DOCUMENT = 104
        
    SUBJECT_RECEIVE_FORM = 201
    SUBJECT_RECEIVE_DOCUMENT = 203
    
    SUBJECT_ERROR = 211
    SUBJECT_INFORMATION = 212
    SUBJECT_REPORT_EVALUATION = 213
    SUBJECT_UNCAUGHT_CASE = 214
    
    CHOICES_SUBJECT_SENDING = (
        (SUBJECT_EMPTY, "---------"),
        (SUBJECT_REQUEST_FORM, "Requesting Form"),
        (SUBJECT_REQUEST_DOCUMENT, "Requesting Document"),
        (SUBJECT_SUBMIT_DOCUMENT, "Submitting Document"),
    )
    
    
    CHOICES_SUBJECT_RECEIVING = (
        (SUBJECT_RECEIVE_FORM, "Assigning Form"),
        (SUBJECT_RECEIVE_DOCUMENT, "Assigning Document"),
        (SUBJECT_ERROR, "Error"),
        (SUBJECT_INFORMATION, "Information"),
        (SUBJECT_REPORT_EVALUATION, "Evaluation Result"),
        (SUBJECT_UNCAUGHT_CASE, "dfjhsjdvnvewe;efhjk")
    )
    
    CHOICES_SUBJECT = CHOICES_SUBJECT_SENDING + CHOICES_SUBJECT_RECEIVING
    
    BODY_UNCAUGHT_CASE = -1
    BODY_ERROR_NO_SUBJECT = 0
    
    BODY_ERROR_MISSING_FORM = 10
    BODY_ERROR_MISSING_DOCUMENT = 11
    BODY_ERROR_MISSING_UNIT = 12
    
    BODY_ERROR_WRONG_UNIT = 20
    BODY_ERROR_WRONG_FORM = 21
    BODY_ERROR_WRONG_DOCUMENT = 22
    
    BODY_ERROR_REDUNDANT_DOCUMENT = 30
        
    BODY_ERROR_UNFOUND_FORM = 40
    BODY_ERROR_UNFOUND_DOCUMENT = 41
    
    BODY_ERROR_EXISTING_FORM = 50
    BODY_ERROR_EXISTING_DOCUMENT = 51
    
    BODY_ERROR_LACKING_TRUST = 60
    
    BODY_ASSIGNING_FORM = 100
    BODY_ASSIGNING_DOCUMENT = 101
    
    BODY_REPORT_FAIL = 110
    BODY_REPORT_SUCCESS = 111
    
    BODY_PERFORMANCE_REPORT = 120
    
    CHOICES_BODY_TYPE = (
        (BODY_UNCAUGHT_CASE, 'BODY_UNCAUGHT_CASE'),
        (BODY_ERROR_NO_SUBJECT, 'BODY_ERROR_NO_SUBJECT'),
        (BODY_ERROR_MISSING_FORM, 'BODY_ERROR_MISSING_FORM'),
        (BODY_ERROR_MISSING_DOCUMENT, 'BODY_ERROR_MISSING_DOCUMENT'),
        (BODY_ERROR_MISSING_UNIT, 'BODY_ERROR_MISSING_UNIT'),
        (BODY_ERROR_WRONG_UNIT, 'BODY_ERROR_WRONG_UNIT'),
        (BODY_ERROR_WRONG_FORM, 'BODY_ERROR_WRONG_FORM'),
        (BODY_ERROR_WRONG_DOCUMENT, 'BODY_ERROR_WRONG_DOCUMENT'),
        (BODY_ERROR_REDUNDANT_DOCUMENT, 'BODY_ERROR_REDUNDANT_DOCUMENT'),
        (BODY_ERROR_UNFOUND_FORM, 'BODY_ERROR_UNFOUND_FORM'),
        (BODY_ERROR_UNFOUND_DOCUMENT, 'BODY_ERROR_UNFOUND_DOCUMENT'),
        (BODY_ERROR_EXISTING_FORM, 'BODY_ERROR_EXISTING_FORM'),
        (BODY_ERROR_EXISTING_DOCUMENT, 'BODY_ERROR_EXISTING_DOCUMENT'),
        (BODY_ERROR_LACKING_TRUST, 'BODY_ERROR_LACKING_TRUST'),
        (BODY_ASSIGNING_FORM, 'BODY_ASSIGNING_FORM'),
        (BODY_ASSIGNING_DOCUMENT, 'BODY_ASSIGNING_DOCUMENT'), 
        (BODY_REPORT_FAIL, 'BODY_REPORT_FAIL'),
        (BODY_REPORT_SUCCESS, 'BODY_REPORT_SUCCESS'),
        (BODY_PERFORMANCE_REPORT, 'BODY_PERFORMANCE_REPORT'),
    )
    
    
    mop = models.ForeignKey(Mop)
    unit = models.ForeignKey(Unit, blank=True, null=True)

    subject = models.IntegerField(choices=CHOICES_SUBJECT, default=SUBJECT_EMPTY, blank=True, null=True)
    body = models.TextField(blank=True, null=True)
    read = models.BooleanField(default=False)
    state = models.IntegerField(choices=CHOICES_STATE, default=STATE_NORMAL)
    type = models.IntegerField(choices=CHOICES_TYPE)
    processed = models.BooleanField(default=False)
    trust = models.IntegerField(blank=True, null=True)
    bodyType = models.IntegerField(choices=CHOICES_BODY_TYPE, blank=True, null=True)
    replyTo = models.ForeignKey('self', blank=True, null=True)
    trustInstance = models.ForeignKey(TrustInstance, blank=True, null=True)
    
    requisitionBlank = models.ForeignKey(RequisitionBlank, null=True, blank=True)
    requisitionInstance = models.ForeignKey(RequisitionInstance, null=True, blank=True)
    mopDocumentInstance = models.ForeignKey(MopDocumentInstance, null=True, blank=True)  
    
    createdAt = CreationDateTimeField()
    modifiedAt = ModificationDateTimeField()
    
    def generateBody(self):
        try:
            data = self.replyTo.requisitionInstance.data
        except:
            data = None
        
        if self.bodyType == self.BODY_UNCAUGHT_CASE:
            text = "Yo35ur ma$$@il could%#34 n#$2ot b24e del$#i%#ve%#red. Som$#et2222hing we42 nt w@$rong."
        elif self.bodyType == self.BODY_ERROR_NO_SUBJECT:
            text = self.unit.mail_error_no_subject
        elif self.bodyType == self.BODY_ERROR_MISSING_FORM:
            text = self.unit.mail_error_missing_form
        elif self.bodyType == self.BODY_ERROR_MISSING_DOCUMENT:
            text = self.unit.mail_error_missing_document
        elif self.bodyType == self.BODY_ERROR_MISSING_UNIT:
            text = "Hi. This is the mop-mail-send program at mail3.mofp.net.<br/>I'm afraid I wasn't able to deliver your message to the following addresses. This is a permanent error; I've given up. Sorry it didn't work out.<br/><br/>ERR341: %%NO ADRESS SPECIFIED%%"
        elif self.bodyType == self.BODY_ERROR_WRONG_UNIT:
            text = self.unit.mail_error_wrong_unit
        elif self.bodyType == self.BODY_ERROR_WRONG_FORM:
            text = self.unit.mail_error_wrong_form
        elif self.bodyType == self.BODY_ERROR_WRONG_DOCUMENT:
            text = self.unit.mail_error_wrong_document
        elif self.bodyType == self.BODY_ERROR_REDUNDANT_DOCUMENT:
            text = self.unit.mail_error_redundant_document
        elif self.bodyType == self.BODY_ERROR_UNFOUND_FORM:
            text = self.unit.mail_error_unfound_form
        elif self.bodyType == self.BODY_ERROR_UNFOUND_DOCUMENT:
            text = self.unit.mail_error_unfound_document
        elif self.bodyType == self.BODY_ERROR_EXISTING_FORM:
            text = self.unit.mail_error_existing_form
        elif self.bodyType == self.BODY_ERROR_EXISTING_DOCUMENT:
            text = self.unit.mail_error_existing_document
        elif self.bodyType == self.BODY_ERROR_LACKING_TRUST:
            text = self.unit.mail_error_lacking_trust
        elif self.bodyType == self.BODY_ASSIGNING_FORM:
            text = self.unit.mail_error_assigning_form
        elif self.bodyType == self.BODY_ASSIGNING_DOCUMENT:
            text = self.unit.mail_assigning_document
        elif self.bodyType == self.BODY_REPORT_FAIL:
            text = self.unit.mail_report_fail
        elif self.bodyType == self.BODY_REPORT_SUCCESS:
            text = self.unit.mail_report_success
        elif self.bodyType == self.BODY_PERFORMANCE_REPORT:
            text = "Your performance report:<br/><br/>In the last period you gained {{data.trust}} performance points.<br/><br/>For the current period your clearance level has therefore been set to {{data.get_clearance_display}} (effective immediately).<br/><br/>For more detail please visit the perfomance page of the intranet."
            data = self.trustInstance
            
        t = Template(text)
        c = Context({"data": data})
        return t.render(c)
    
    def __unicode__(self):
        if self.subject == None:
            subject = "no subject"
        else:
            subject = self.get_subject_display()
        return "%s - %s - %s - %s - processed: %s" % (self.get_type_display(), self.mop.user.username, subject, self.trust, str(self.processed))


