from django.db import models

from players.models import Mop
from assets.models import Unit, Requisition, CronDocument, MopDocument, AbstractDocument
from django_extensions.db.fields import CreationDateTimeField, ModificationDateTimeField
from provmanager.models import Provenance
from deptx.helpers import random_chars
import deptx.friendly_id as friendly_id
import re

class RandomizedDocument(models.Model):
    mopDocument = models.ForeignKey(MopDocument)
    provenance = models.OneToOneField(Provenance, related_name="randomizedDocument")
    serial = models.CharField(max_length=36, blank=True, null=True, unique=True, help_text="leave blank, will be generated by system")
    #TODO/PERHAPS replace with Due-date
    active = models.BooleanField(default=True)
    createdAt = CreationDateTimeField()
    modifiedAt = ModificationDateTimeField()
    
    def __unicode__(self):
        if self.active == True:
            active = "ACTIVE"
        else:
            active = "INACTIVE"
        return "%s: %s (%s)" % (active, self.serial, self.mopDocument.provenance.name)
        #return "%s" % (self.serial)
    
    def save(self, *args, **kwargs):
        super(RandomizedDocument, self).save(*args, **kwargs)
        if self.id and not self.serial:
            if self.mopDocument.clearance == AbstractDocument.CLEARANCE_LOW:
                beginning = "ABCDE12"
                end = "MIXEDREALITYLAB1212"
            elif self.mopDocument.clearance == AbstractDocument.CLEARANCE_MEDIUM:
                beginning = "FGHIJ34"
                end = "PROVENANCE3434"
            elif self.mopDocument.clearance == AbstractDocument.CLEARANCE_HIGH:
                beginning = "KLMNP56"
                end = "NOTTINGHAM5656"
            self.serial = "DOC-%s-%s-%s-%s" % (self.mopDocument.unit.serial, random_chars(size=2, chars=beginning), friendly_id.encode(self.id), random_chars(chars=end))
            super(RandomizedDocument, self).save()

class MopDocumentInstance(models.Model):
    STATUS_ACTIVE = 0
    STATUS_REPORTED = 1
    STATUS_REVOKED = 3
    STATUS_HACKED = 4
     
    CHOICES_STATUS = (
        (STATUS_ACTIVE, "active"),
        (STATUS_REPORTED, "reported"),
        (STATUS_REVOKED, "revoked"),
        (STATUS_HACKED, "hacked"),
    )
    
    TYPE_MOP = 0
    TYPE_CRON = 1
    
    CHOICES_TYPE = (
        (TYPE_MOP, "MOP"),
        (TYPE_CRON, "CRON"),
    )

    createdAt = CreationDateTimeField()
    modifiedAt = ModificationDateTimeField()
    
    mop = models.ForeignKey(Mop)
    status = models.IntegerField(choices=CHOICES_STATUS, default=STATUS_ACTIVE)
    modified = models.BooleanField(default=False)
    used = models.BooleanField(default=False)
    correct = models.BooleanField(default=False)
    provenanceState = models.TextField(blank=True, null=True)
    #stuff needed if it is a mop-document or cron-document
    type = models.IntegerField(choices=CHOICES_TYPE, default=TYPE_MOP)
    randomizedDocument = models.ForeignKey(RandomizedDocument, blank=True, null=True)
    cronDocument = models.ForeignKey(CronDocument, blank=True, null=True)

    def getDocumentSerial(self):
        if self.type == self.TYPE_MOP:
            return self.randomizedDocument.serial
        else:
            return self.cronDocument.serial

    def __unicode__(self):
        #return "%s - %s - %s - %s" % (self.get_type_display(), self.mop.user.username, self.get_status_display(), self.getDocumentSerial())
        return "%s" % (self.getDocumentSerial())
        
class RequisitionBlank(models.Model):
    mop = models.ForeignKey(Mop)
    requisition = models.ForeignKey(Requisition)
    createdAt = CreationDateTimeField()
    modifiedAt = ModificationDateTimeField()
    
    def __unicode__(self):
        return self.requisition.name + " - " + self.mop.user.username 

class RequisitionInstance(models.Model):
    blank = models.ForeignKey(RequisitionBlank)
    data = models.CharField(max_length=256, blank=True, null=True)
    used = models.BooleanField(default=False)
    createdAt = CreationDateTimeField()
    modifiedAt = ModificationDateTimeField()
    serial = models.CharField(max_length=36, blank=True, null=True, unique=True, help_text="leave blank, will be generated by system")
    
    def __unicode__(self):
        return "%s-%s" % (self.blank.requisition.serial, self.serial)
    
    def save(self, *args, **kwargs):
        self.data = re.sub("[^0-9A-Z-]", "", self.data)
        super(RequisitionInstance, self).save(*args, **kwargs)
        if self.id and not self.serial:
            self.serial = "%s" % (friendly_id.encode(self.id))
            super(RequisitionInstance, self).save(*args, **kwargs)

class Mail(models.Model):
    TYPE_RECEIVED = 0
    TYPE_SENT = 1
    TYPE_DRAFT = 2
    
    CHOICES_TYPE = (
        (TYPE_RECEIVED, "received"),
        (TYPE_SENT, "sent"),
        (TYPE_DRAFT, "draft")
    )
    
    STATE_NORMAL = 0
    STATE_TRASHED = 1
    STATE_DELETED = 2
    
    CHOICES_STATE = (
        (STATE_NORMAL, "normal"),
        (STATE_TRASHED, "trashed"),
        (STATE_DELETED, "deleted")
    )
  
    SUBJECT_EMPTY = 1
    
    SUBJECT_REQUEST_FORM = 101
    SUBJECT_REQUEST_DOCUMENT = 103
    SUBJECT_SUBMIT_DOCUMENT = 104
        
    SUBJECT_RECEIVE_FORM = 201
    SUBJECT_RECEIVE_DOCUMENT = 203
    
    SUBJECT_ERROR = 211
    SUBJECT_INFORMATION = 212
    SUBJECT_REPORT_EVALUATION = 213
    SUBJECT_UNCAUGHT_CASE = 214
    
    CHOICES_SUBJECT_SENDING = (
        (SUBJECT_EMPTY, "---------"),
        (SUBJECT_REQUEST_FORM, "Requesting Form"),
        (SUBJECT_REQUEST_DOCUMENT, "Requesting Document"),
        (SUBJECT_SUBMIT_DOCUMENT, "Submitting Document"),
    )
    
    
    CHOICES_SUBJECT_RECEIVING = (
        (SUBJECT_RECEIVE_FORM, "Assigning Form"),
        (SUBJECT_RECEIVE_DOCUMENT, "Assigning Document"),
        (SUBJECT_ERROR, "Error"),
        (SUBJECT_INFORMATION, "Information"),
        (SUBJECT_REPORT_EVALUATION, "Evaluation Result"),
        (SUBJECT_UNCAUGHT_CASE, "dfjhsjdvnvewe;efhjk")
    )
    
    CHOICES_SUBJECT = CHOICES_SUBJECT_SENDING + CHOICES_SUBJECT_RECEIVING
    
    
    mop = models.ForeignKey(Mop)
    unit = models.ForeignKey(Unit, blank=True, null=True)

    subject = models.IntegerField(choices=CHOICES_SUBJECT, default=SUBJECT_EMPTY, blank=True, null=True)
    body = models.TextField(blank=True, null=True)
    read = models.BooleanField(default=False)
    state = models.IntegerField(choices=CHOICES_STATE, default=STATE_NORMAL)
    type = models.IntegerField(choices=CHOICES_TYPE)
    processed = models.BooleanField(default=False)
    
    requisitionInstance = models.ForeignKey(RequisitionInstance, null=True, blank=True)
    mopDocumentInstance = models.ForeignKey(MopDocumentInstance, null=True, blank=True)  
    
    createdAt = CreationDateTimeField()
    modifiedAt = ModificationDateTimeField()
    
    def __unicode__(self):
        if self.subject == None:
            subject = "no subject"
        else:
            subject = self.get_subject_display()
        return "%s - %s - %s - processed: %s" % (self.get_type_display(), self.mop.user.username, subject, str(self.processed))

class Badge(models.Model):
    BADGE_0 = 0
    BADGE_1 = 1
    BADGE_2 = 2
    BADGE_3 = 3
    BADGE_4 = 4
    BADGE_5 = 5
    BADGE_6 = 6
    BADGE_7 = 7
    BADGE_8 = 8
    BADGE_9 = 9
    BADGE_10 = 10
    BADGE_11 = 11
    
    CHOICES_BADGE = (
        (BADGE_0, 'Black ORCHID'),
        (BADGE_1, 'Green ORCHID'),
        (BADGE_2, 'Blue ORCHID'),
        (BADGE_3, 'Orange ORCHID'),
        (BADGE_4, 'Yellow ORCHID'),
        (BADGE_5, 'Beige ORCHID'),
        (BADGE_6, 'Purple ORCHID'),
        (BADGE_7, 'Turquois ORCHID'),
        (BADGE_8, 'Mint ORCHID'),
        (BADGE_9, 'Brown ORCHID'),
        (BADGE_10, 'White ORCHID'),
        (BADGE_10, 'Ultraviolet ORCHID'),                 
    )
    
    
    mop = models.ForeignKey(Mop)
    badge = models.IntegerField(choices=CHOICES_BADGE)
    createdAt = CreationDateTimeField()
    modifiedAt = ModificationDateTimeField()
    
    def __unicode__(self):
        return "%s - %s" % (self.mop.user.username, self.get_badge_display())
    
    